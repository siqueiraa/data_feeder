[package]
name = "data_feeder"
version = "0.1.0"
edition = "2021"


[dependencies]
chrono = { version = "0.4", features = ["serde"] }
postgres-types = { version = "0.2", features = ["derive", "with-chrono-0_4"] }
csv = "1.3"
futures = "0.3"
heed = "0.22"
kameo = "0.14"
reqwest = { version = "0.12", features = ["blocking", "json"] }
rustc-hash = "2.1"
serde = { version = "1.0", features = ["derive"] }
sha2 = "0.10"
thiserror = "2.0"
tokio = { version = "1.47", features = ["full"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
zip = "4.3"
tempfile = "3.10.1"
rayon = "1.10"
tokio-tungstenite = { version = "0.20", features = ["native-tls"] }
futures-util = "0.3"
serde_json = "1.0"
tokio-postgres = "0.7"
deadpool-postgres = "0.10"
toml = "0.8"
dashmap = "6.1"
rdkafka = { version = "0.36", features = ["cmake-build", "ssl-vendored", "gssapi-vendored"] }
warp = "0.3"
tdigest = "0.2"
prometheus = "0.13"
hyper = { version = "1.0", features = ["full"] }
hyper-util = { version = "0.1", features = ["full"] }
http-body-util = "0.1"
tokio-metrics = { version = "0.3", features = ["rt"] }
num_cpus = "1.16"

[dev-dependencies]
tokio-test = "0.4"
mockall = "0.12"
tempfile = "3.10"
criterion = { version = "0.5", features = ["html_reports"] }

[[bench]]
name = "performance_benchmark"
harness = false

# PHASE 11 + SIMD OPTIMIZATION: Maximum performance compiler settings
[profile.release]
lto = "fat"                    # Full Link Time Optimization
codegen-units = 1              # Single codegen unit for better optimization
panic = "abort"                # Remove panic handling overhead
opt-level = 3                  # Maximum optimization level

# PHASE 4: Native CPU target for maximum SIMD utilization
# ARM64/AArch64 optimizations (Apple Silicon):
# Enable with: RUSTFLAGS="-C target-cpu=native -C target-feature=+neon,+fp16,+dotprod" cargo build --release
# Intel x86_64 optimizations:
# Enable with: RUSTFLAGS="-C target-cpu=native -C target-feature=+avx2,+fma" cargo build --release
# 
# Profile-Guided Optimization (PGO) setup:
# 1. cargo build --release
# 2. ./target/release/data_feeder  # Run with representative workload
# 3. RUSTFLAGS="-C profile-use=/path/to/profile" cargo build --release
#
# Alternative: Use bolt for post-link optimization:
# llvm-bolt ./target/release/data_feeder -data=profile.fdata -reorder-functions -o data_feeder_bolt

[[bin]]
name = "test_tdigest_performance"
path = "test_tdigest_performance.rs"
