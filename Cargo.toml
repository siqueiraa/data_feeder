[package]
name = "data_feeder"
version = "0.1.0"
edition = "2021"


[dependencies]
chrono = { version = "0.4", features = ["serde"] }
postgres-types = { version = "0.2", features = ["derive", "with-chrono-0_4"], optional = true }
csv = "1.3"
futures = "0.3"
heed = "0.22"
kameo = "0.14"
reqwest = { version = "0.12", features = ["blocking", "json"] }
rustc-hash = "2.1"
foldhash = "0.1"
serde = { version = "1.0", features = ["derive"] }
sha2 = "0.10"
thiserror = "2.0"
tokio = { version = "1.47", features = ["full"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter", "json", "chrono"] }
tracing-appender = "0.2"
zip = "4.3"
tempfile = "3.10.1"
rayon = "1.10"
fastwebsockets = { version = "0.6", features = ["upgrade"] }
http = "1.0"
crossbeam-channel = "0.5"
sharded-slab = "0.1"
sonic-rs = "0.3"
rkyv = { version = "0.7", features = ["validation"] }
url = "2.5"
bytes = "1.8"
futures-util = "0.3"
serde_json = "1.0"
tokio-native-tls = "0.3"
native-tls = "0.2"
simd-json = "0.13"
tokio-postgres = { version = "0.7", optional = true }
deadpool-postgres = { version = "0.10", optional = true }
parking_lot = "0.12"
toml = "0.8"
dashmap = "6.1"
rdkafka = { version = "0.36", features = ["cmake-build", "ssl-vendored", "gssapi-vendored"], optional = true }
warp = "0.3"
tdigest = "0.2"
rust_decimal = { version = "1.36", features = ["serde"] }
rust_decimal_macros = "1.36"
bumpalo = { version = "3.14", features = ["collections"] }
sysinfo = "0.30"
fixed = "1.24"
fast-float = "0.2"
prometheus = "0.13"
hyper = { version = "1.0", features = ["full"] }
hyper-util = { version = "0.1", features = ["full"] }
http-body-util = "0.1"
tokio-metrics = { version = "0.3", features = ["rt"] }
num_cpus = "1.16"
ahash = "0.8"
ureq = "2.9"
libc = "0.2"
flate2 = "1.0"
rand = "0.8"

[features]
default = ["kafka", "postgres", "volume_profile"]
kafka = ["rdkafka"]
postgres = ["tokio-postgres", "deadpool-postgres", "postgres-types", "rust_decimal/db-postgres"]
volume_profile = []
volume_profile_reprocessing = ["volume_profile"]
postgres-tests = []

[dev-dependencies]
tokio-test = "0.4"
mockall = "0.12"
tempfile = "3.10"
criterion = { version = "0.5", features = ["html_reports"] }
tracing-test = "0.2"

[[bench]]
name = "performance_benchmark"
harness = false

[[bench]]
name = "library_migration_benchmark_fixed"
harness = false

# STORY 6.3: Advanced Compiler Optimization Profiles

# Production release profile with full optimizations
[profile.release]
lto = "fat"                    # Full Link Time Optimization
codegen-units = 1              # Single codegen unit for better optimization
panic = "abort"                # Remove panic handling overhead
opt-level = 3                  # Maximum optimization level

# Profile-Guided Optimization (PGO) profile
[profile.pgo-gen]
inherits = "release"
lto = "fat"
codegen-units = 1
# PGO generation flags will be set via RUSTFLAGS

# Profile-Guided Optimization optimized build
[profile.pgo-use]
inherits = "release"
lto = "fat"
codegen-units = 1
# PGO usage flags will be set via RUSTFLAGS

# Native CPU optimized profile for maximum SIMD utilization
[profile.native]
inherits = "release"
lto = "fat"
codegen-units = 1
# Native CPU flags will be set via RUSTFLAGS

# Development profile with moderate optimizations for faster builds
[profile.dev-optimized]
inherits = "dev"
opt-level = 1
debug = true
lto = "thin"

# Benchmark profile for performance testing
[profile.bench]
inherits = "release"
debug = true                   # Keep debug symbols for profiling
lto = "fat"

# Apple M3 Max optimized profile for local testing
[profile.m3-max]
inherits = "release"
lto = "thin"                   # Use thin LTO to avoid conflicts
codegen-units = 1
opt-level = 3
panic = "abort"

# Target-specific optimization configurations:
# ARM64/AArch64 (Apple Silicon M3 Max): RUSTFLAGS="-C target-cpu=native -C target-feature=+neon,+fp16,+dotprod,+crypto"
# Intel x86_64: RUSTFLAGS="-C target-cpu=native -C target-feature=+avx2,+fma"
# 
# Profile-Guided Optimization workflow:
# 1. PGO Generation: RUSTFLAGS="-C profile-generate=/tmp/pgo-data" cargo build --profile pgo-gen
# 2. Profile Collection: ./target/pgo-gen/data_feeder (run with representative workload)
# 3. PGO Optimization: RUSTFLAGS="-C profile-use=/tmp/pgo-data" cargo build --profile pgo-use
#
# Link-Time Optimization with BOLT:
# llvm-bolt ./target/release/data_feeder -data=profile.fdata -reorder-functions -o data_feeder_bolt

[[bin]]
name = "test_tdigest_performance"
path = "tests/performance/test_tdigest_performance.rs"

[[bin]]
name = "profile_workload"
path = "src/bin/profile_workload.rs"

[[bin]]
name = "cpu_profile"
path = "src/bin/cpu_profile.rs"

[[bin]]
name = "validate_optimizations"
path = "src/bin/validate_optimizations.rs"

[[bin]]
name = "test_performance_monitoring"
path = "src/bin/test_performance_monitoring.rs"

[[bin]]
name = "benchmark_optimization"
path = "src/bin/benchmark_optimization.rs"

[[bin]]
name = "simple_benchmark"
path = "src/bin/simple_benchmark.rs"

[[bin]]
name = "realistic_benchmark"
path = "src/bin/realistic_benchmark.rs"
