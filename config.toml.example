# Data Feeder Configuration File

[database]
# PostgreSQL connection settings
host = "localhost"
port = 5432
database = "crypto_data"
username = "postgres"
password = "your_password"
max_connections = 10
connection_timeout_seconds = 30

# Storage settings
batch_size = 1000
batch_timeout_seconds = 5
enabled = false  # Set to true to enable PostgreSQL storage

[application]
# Application settings
symbols = ["BTCUSDT"]
timeframes = [60]  # 1 minute in seconds
storage_path = "lmdb_data"
gap_detection_enabled = true
start_date = "2025-01-01T00:00:00Z"  # Optional start date for historical data
respect_config_start_date = false
monthly_threshold_months = 3
enable_technical_analysis = true

# HTTP server settings
health_server_port = 8080  # Port for health checks, metrics, and readiness probes

# WebSocket reconnection settings
reconnection_gap_threshold_minutes = 1
reconnection_gap_check_delay_seconds = 5

# Periodic gap detection settings (prevents data loss during stable connections)
periodic_gap_detection_enabled = true
periodic_gap_check_interval_minutes = 5  # How often to scan for gaps
periodic_gap_check_window_minutes = 30   # How far back to scan for gaps

[technical_analysis]
# Technical analysis configuration
min_history_days = 60
ema_periods = [21, 89]
timeframes = [60, 300, 900, 3600, 14400]  # 1m, 5m, 15m, 1h, 4h
volume_lookback_days = 60

[kafka]
# Kafka producer settings for technical analysis indicators
enabled = false  # Set to true to enable Kafka publishing
bootstrap_servers = ["localhost:9092"]  # Replace with your Kafka broker address
topic_prefix = "ta_"  # Results in "ta_data" topic
client_id = "data_feeder_rust"
acks = "all"  # Ensure message durability
retries = 3
max_in_flight_requests_per_connection = 1
compression_type = "snappy"
batch_size = 16384
linger_ms = 10
request_timeout_ms = 30000
delivery_timeout_ms = 120000

[volume_profile]
# Volume Profile settings - Asset-aware configuration
enabled = true
price_increment_mode = "Adaptive"    # "Fixed" or "Adaptive" - Adaptive recommended for multi-asset
target_price_levels = 500           # Target number of price levels per range (adaptive mode)
fixed_price_increment = 0.01        # Used when mode is "Fixed"
min_price_increment = 0.00000001    # Minimum increment for adaptive mode (altcoin precision)
max_price_increment = 1.0         # Maximum increment for adaptive mode (high-value assets)
volume_distribution_mode = "WeightedOHLC"          # "UniformOHLC", "ClosingPrice", "WeightedOHLC", "HighLowWeighted"
value_area_calculation_mode = "Traditional"       # "Traditional", "Greedy"
calculation_mode = "Volume"                      # "Volume" or "TPO" - Controls POC and value area calculation method
update_frequency = "EveryCandle"    # "EveryCandle" or "Batched"
batch_size = 1                      # Number of profiles to batch before storage
value_area_percentage = 70.0        # Percentage of volume to include in value area (industry standard)

# Volume Profile Calculation Methods:
# - "Volume": Weight by actual trading volume (default, most common)
#   POC = price level with highest volume, VA = 70% of total volume
# - "TPO": Weight by time periods/candle count (traditional Market Profile)
#   POC = price level with most time periods, VA = 70% of total time periods

# Asset-specific overrides (optional - for fine-tuning specific assets)
[volume_profile.asset_overrides]
# High-value assets with fixed increments for better performance
"BTCUSDT" = { price_increment_mode = "Fixed", fixed_price_increment = 10.0, calculation_mode = "Volume" }   # $10 increments for Bitcoin
"ETHUSDT" = { price_increment_mode = "Fixed", fixed_price_increment = 1.0, calculation_mode = "Volume" }    # $1 increments for Ethereum

# Mid-value assets
"SOLUSDT" = { price_increment_mode = "Fixed", fixed_price_increment = 0.1, calculation_mode = "Volume" }    # $0.10 increments for Solana
"ADAUSDT" = { price_increment_mode = "Fixed", fixed_price_increment = 0.001, calculation_mode = "Volume" }  # $0.001 increments for Cardano

# Micro-cap altcoins with ultra-precise adaptive ranges
"PEPEUSDT" = { price_increment_mode = "Adaptive", min_price_increment = 0.00000001, max_price_increment = 0.000001, calculation_mode = "TPO" }
"SHIBUSDT" = { price_increment_mode = "Adaptive", min_price_increment = 0.00000001, max_price_increment = 0.00001, calculation_mode = "TPO" }

[adaptive]
# Adaptive resource configuration system
enabled = true  # Enable adaptive configuration based on system resources

# Manual overrides for adaptive configuration
# (all parameters are optional - omit to use adaptive values)
[adaptive.overrides]
# Thread pool overrides
# worker_threads = 8       # Override worker thread count
# io_threads = 16          # Override I/O thread count
# cpu_threads = 4          # Override CPU-intensive thread count
# network_threads = 2      # Override network thread count

# Buffer size overrides (in MB for convenience)
# websocket_buffer_mb = 16    # WebSocket message buffer (MB)
# database_buffer_mb = 64     # Database batch buffer (MB)
# file_io_buffer_mb = 32      # File I/O buffer (MB)
# network_buffer_mb = 8       # Network buffer (MB)

# Processing batch size overrides
# database_batch_size = 2000  # Database batch size (number of records)
# api_batch_size = 100        # API request batch size
# file_chunk_size = 16384     # File processing chunk size
# memory_chunk_size = 8192    # Memory processing chunk size

# Memory management overrides
# max_memory_usage_percent = 75.0         # Maximum memory usage (0-100%)
# cleanup_threshold_percent = 65.0        # Memory cleanup threshold (0-100%)
# cache_size_mb = 512                     # Cache size limit (MB)
# enable_memory_intensive_features = true # Enable memory-intensive features

# Disable adaptive configuration entirely (use static defaults)
# disable_adaptive = false